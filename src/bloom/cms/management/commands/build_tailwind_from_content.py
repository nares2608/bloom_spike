import re
import os
from django.core.management.base import BaseCommand
from django.core.management import call_command
from wagtail.models import Page
from django.conf import settings

class Command(BaseCommand):
    help = 'Extract all Tailwind classes from RawHTML/StreamField blocks and build Tailwind CSS with django-tailwind'

    def add_arguments(self, parser):
        parser.add_argument(
            '--app-name',
            type=str,
            default='theme', 
            help='Name of your django-tailwind app'
        )

    def handle(self, *args, **options):
        print("Scanning pages for inline Tailwind classes...")
        classes = set()
        
        try:
            pages = Page.objects.live().specific()
            page_count = 0
            for page in pages:
                page_count += 1
                if hasattr(page, 'body'):
                    
                    try:
                        for block in page.body:
                            if block.block_type == 'html':
                                
                                html_content = str(block.value)
                                found_classes = re.findall(r'class="([^"]+)"', html_content)
                                for cls_str in found_classes:
                                    if cls_str.strip():  
                                            classes.add(cls_str.strip())
                    except Exception as e:
                        print(f"  Error processing StreamField for page {page.title}: {e}")
                else:
                    print(f"  No 'body' StreamField found on page: {page.title}")
                    
            print(f"Scanned {page_count} pages")
                    
        except Exception as e:
            print(f"Error scanning pages: {e}")
            return

        print(f"Found classes: {sorted(classes)}")

        if not classes:
            print("No Tailwind classes found in DB content.")
            
        else:
            print(f"Extracted {len(classes)} classes from database content")

        
        app_name = options['app_name']
        
        
        tailwind_app_path = None
        for app_dir in settings.INSTALLED_APPS:
            if app_dir == app_name or app_dir.endswith(f'.{app_name}'):
                
                try:
                    import importlib
                    module = importlib.import_module(app_dir)
                    if hasattr(module, '__path__'):
                        tailwind_app_path = module.__path__[0]
                        break
                except ImportError:
                    continue
        
        if not tailwind_app_path:
            
            tailwind_app_path = app_name
            
        
        safelist_path = os.path.join(tailwind_app_path, 'safelist.txt')
        
        try:
            os.makedirs(os.path.dirname(safelist_path), exist_ok=True)
            with open(safelist_path, 'w') as f:
                f.write('\n'.join(sorted(classes)))
            print(f"Created safelist file: {safelist_path}")
            
            
            safelist_js_path = os.path.join(tailwind_app_path, 'dynamic_classes.py')
            with open(safelist_js_path, 'w') as f:
                f.write(f"# Auto-generated by build_tailwind_from_content command\n")
                f.write(f"DYNAMIC_CLASSES = {list(sorted(classes))}\n")
            print(f"Created Python safelist file: {safelist_js_path}")
            
        except Exception as e:
            print(f"Error writing safelist files: {e}")

        
        print("Building Tailwind CSS using django-tailwind...")
        
        try:
            
            call_command('tailwind', 'build')
            print("Tailwind CSS built successfully using django-tailwind!")
            
        except Exception as e:
            print(f"Error building Tailwind CSS with django-tailwind: {e}")
           
            
        
        print("\n" + "="*60)
        print("IMPORTANT: Update your tailwind.config.js")
        print("="*60)
        print("Add the following to your tailwind.config.js safelist:")
        print(f"""
// In your {app_name}/tailwind.config.js
module.exports = {{
  // ... other config
  safelist: [
    // Your existing safelist items
    {repr(list(sorted(classes)))},
    // Or reference the dynamic file:
    // ...require('./dynamic_classes.py').DYNAMIC_CLASSES,
  ],
  // ... rest of config
}}
""")
       